'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _reactNative = require('react-native');

var _nativePromiseOnly = require('native-promise-only');

var _nativePromiseOnly2 = _interopRequireDefault(_nativePromiseOnly);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toArray(arr) { return Array.isArray(arr) ? arr : Array.from(arr); }

var toString = function toString(str) {
	return typeof str !== 'string' ? str.toString() : str;
};
var isObject = function isObject(value) {
	return Object.prototype.toString.call(value) === '[object Object]';
};
var splitPath = function splitPath(path) {
	var divider = /\./g.test(path) ? '.' : '/';
	return path.split(divider);
};

var get = function get(path) {
	var defaultValue = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

	var paths = splitPath(toString(path));

	var _paths = _toArray(paths);

	var key = _paths[0];

	var nestedProps = _paths.slice(1);

	return new _nativePromiseOnly2.default(function (resolve, reject) {
		_reactNative.AsyncStorage.getItem(key).then(function (value) {

			if (value === null) reject({ message: key + ' is undefined', key: key });

			var parsedValue = JSON.parse(value);
			var getValue = function getValue(target, key, currentValue) {
				return currentValue === undefined ? defaultValue : currentValue;
			};
			var resolved = nestedProps.length > 0 ? findNestedValue(parsedValue, getValue, nestedProps, reject) : parsedValue || defaultValue;

			resolve(resolved);
		});
	});
};

var set = function set(path, value) {
	var paths = splitPath(toString(path));

	var _paths2 = _toArray(paths);

	var key = _paths2[0];

	var nestedProps = _paths2.slice(1);

	return new _nativePromiseOnly2.default(function (resolve, reject) {

		var setItem = function setItem(key, value) {
			_reactNative.AsyncStorage.setItem(key, JSON.stringify(value)).then(function () {
				return resolve({ key: key });
			});
		};

		if (nestedProps.length < 1) setItem(key, value);else {
			get(key).then(function (target) {

				var updateValue = function updateValue(target, key, currentValue) {
					target[key] = value;
					return target;
				};
				// setNestedValue will mutate the value obj
				findNestedValue(target, updateValue, nestedProps, reject);
				setItem(key, target);
			});
		}
	});
};

var remove = function remove(path, returnValue) {
	var paths = splitPath(toString(path));

	var _paths3 = _toArray(paths);

	var key = _paths3[0];

	var nestedProps = _paths3.slice(1);

	return new _nativePromiseOnly2.default(function (resolve, reject) {

		if (nestedProps.length < 1) {
			_reactNative.AsyncStorage.removeItem(key).then(function () {
				return resolve(returnValue);
			});
		} else {
			get(key).then(function (target) {

				var deleteValue = function deleteValue(target, key, currentValue) {
					delete target[key];
					return true;
				};
				// setNestedValue will mutate the value obj
				findNestedValue(target, deleteValue, nestedProps, reject);

				_reactNative.AsyncStorage.setItem(key, JSON.stringify(target)).then(function () {
					return resolve(target);
				});
			});
		}
	});
};

var findNestedValue = function findNestedValue(target, cb, keys, error) {
	var index = arguments.length <= 4 || arguments[4] === undefined ? 0 : arguments[4];

	var key = keys[index];
	var value = target[key];

	if (keys.length - 1 === index) {
		return cb(target, key, value);
	} else {
		if (value === undefined) {
			error({ message: key + ' is undefined', key: key });
			return false;
		}

		if (!isObject(value)) {
			error({ message: key + ' is not an object', key: key });
			return false;
		}
	}

	findNestedValue(value, defaultValue, keys, index + 1);
};

exports.default = {
	get: get,
	set: set,
	remove: remove
};
